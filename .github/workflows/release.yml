name: Release
on:
  push:
    branches: [main]
jobs:
  release-please:
    name: Create release PR
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          release-type: python
          package-name: sk-transformers
          prerelease: true
          default-branch: main
          pull-request-header: ":robot: I have created a release *beep* *boop*. This was predictable."
          changelog-types: '[{"type":"maintain","section":"Maintenance","hidden":false},{"type":"resolve","section":"Miscellaneous","hidden":true},{"type":"add","section":"Features","hidden":false},{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"bug","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":true},{"type":"test","section":"Tests","hidden":false},{"type":"ci","section":"CI/CD","hidden":false},{"type":"refactor","section":"Maintenance","hidden":false},{"type":"perf","section":"Maintenance","hidden":false},{"type":"revert","section":"Maintenance","hidden":true},{"type":"docs","section":"Documentation","hidden":false},{"type":"security","section":"Security","hidden":false}]'

  deploy-package_linux:
    if: ${{ startsWith(github.event.head_commit.message, 'chore(main)') }}
    name: Deploy package to PyPI (Linux)
    needs: release-please
    runs-on: ubuntu-latest
    environment: deploy-package
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  deploy-package_windows:
    if: ${{ startsWith(github.event.head_commit.message, 'chore(main)') }}
    name: Deploy package to PyPI (Windows)
    needs: release-please
    runs-on: windows-latest
    environment: deploy-package
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  deploy-package_macos:
    if: ${{ startsWith(github.event.head_commit.message, 'chore(main)') }}
    name: Deploy package to PyPI (macOS)
    needs: release-please
    runs-on: macos-latest
    environment: deploy-package
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *

  deploy-docs:
    name: Deploy documentation
    needs: deploy-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install poetry
        run: |
          curl -O -sSL https://install.python-poetry.org/install-poetry.py
          python install-poetry.py -y --version 1.4.2
          echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
          rm install-poetry.py
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"
      - run: poetry env use python3.10
      - run: poetry install --with docs
      - run: poetry run mkdocs gh-deploy --force --clean --verbose

  fast-forward-merge-pr:
    name: Create fast-forward merge PR
    needs: deploy-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
      - name: Reset main branch
        run: |
          git fetch origin main:main
          git reset --hard main
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: temp-main
          base: develop
          delete-branch: true
          title: "resolve: fast-forward merge `main` into `develop`"
          body: |
            ‚ÑπÔ∏è ‚ÑπÔ∏è ‚ÑπÔ∏è
            This pull request was created automatically by a GitHub Action to fast-forward-merge the `main` branch into `develop`.
            it will be automatically merged. You just have to *approve* it!. Have a üç™ and enjoy this automation!
